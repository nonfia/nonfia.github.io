[{"content":"Spring Boot 介绍 Spring Boot是由 Pivotal 团队提供的一套开源框架，可以简化 spring 应用的创建及部署。它提供了丰富的 Spring 模块化支持，可以帮助开发者更轻松快捷地构建出企业级应用。Spring Boot 通过自动配置功能，降低了复杂性，同时支持基于 JVM 的多种开源框架，可以缩短开发时间，使开发更加简单和高效。\n创建方式 在线创建 打开 https://start.spring.io 这个网站\n这里要配置的按顺序分别如下：\nProject: 它定义项目的种类。我们可以创建 Maven项目或 Gradle 项目。 Language: : Spring Initializr提供了三种语言 Java，Kotlin，和 Groovy 的选择。 Spring Boot: : 可以选择 Spring Boot 版本。 Project Metadata: : 它包含与项目相关的信息，例如 Group ，Artifact 等。 Dependencies: 添加到项目中的依赖。 所有的事情全部完成后，点击最下面的 Generate，此时会自动下载项目，将下载下来的项目解压，然后用 IntelliJ IDEA 或者 Eclipse 打开即可进行开发。\n开发工具创建（IntelliJ IDEA） 首先在创建项目时选择 Spring boot\n接下来选择需要添加的依赖\n勾选完成后，点击 创建 完成项目的创建。\n项目结构 根据上面的操作已经初始化了一个 Spring Boot 的框架了，项目结构如下：\n此时项目里面基本没有代码，除了空目录外，还包含如下几样东西。\npom.xml：Maven构建说明文件。 DemoApplication.java：一个带有main()方法的类，用于启动应用程序（关键）。 DemoApplicationTests.java：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。 application.properties：一个空的properties文件，你可以根据需要添加配置属性。 运行项目 修改 DemoApplication.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @RestController @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } @GetMapping(\u0026#34;/\u0026#34;) public String hello() { return \u0026#34;Hello World\u0026#34;; } } 运行项目，控制台打印如下\n此时浏览器输入 http://localhost:8080 浏览器会打印 Hello World\n","date":"2024-11-17T00:00:00Z","permalink":"/document/springboot/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84springboot%E9%A1%B9%E7%9B%AE/","title":"创建一个简单的SpringBoot项目"}]